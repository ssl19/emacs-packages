This is org-odt.info, produced by makeinfo version 6.8 from
org-odt.texi.


File: org-odt.info,  Node: Top,  Next: Project Summary,  Up: (dir)

OpenDocument Text Exporter for Emacs’ Org Mode
**********************************************

This manual documents ‘ox-odt’, an Emacs Lisp library that exports Org
mode (https://orgmode.org/) files to OpenDocument format
(http://www.oasis-open.org/committees/office) format.  Office Documents
produced by this backend are compliant with OpenDocument-v1.2
Specification
(http://docs.oasis-open.org/office/v1.2/OpenDocument-v1.2.html), and can
be opened with LibreOffice (http://www.libreoffice.org/) or any other
compliant OpenDocument application.

   This manual is for a _fork_ of the *note (org)OpenDocument Text
export:: engine that ships with stock Emacs.  If you are an existing
user of the stock Emacs backend, and want to learn about new features
_exclusive_ to this fork jump right to *note What is New:: section.

* Menu:

* Project Summary::
* Structure of ELPA tar::
* Getting Started with ODT export:: What packages ODT exporter relies on
* ODT export commands::          How to invoke ODT export
* Extending ODT export::         How to produce ’doc’, ’pdf’ files
* Applying custom styles::       How to apply custom styles to the output
* Links in ODT export::          How links will be interpreted and formatted
* List Tables in ODT export::    How to create Tables with multi-paragraph content
* Tables in ODT export::         How Tables are exported
* Images in ODT export::         How to insert images
* Math formatting in ODT export:: How LaTeX fragments are formatted
* Labels and captions in ODT export:: How captions are rendered
* Literal examples in ODT export:: How source and example blocks are formatted
* Advanced topics in ODT export:: Read this if you are a power user
* Main Index::                   Index of concepts related to OpenDocumentText format
* Key Index::                    Key bindings used for export
* Command and Function Index::   Commands used for export
* Variable Index::               Options that control the exporter
* What is New::

— The Detailed Node Listing —

Getting Started with ODT export

* Pre-requisites for ODT export:: What packages ODT exporter relies on
* Installation::
* Configuration::

ODT export commands

* Exporting to ODT::

Extending ODT export

* Automatically exporting to other formats::
* Converting between document formats::

Applying custom styles

* Applying custom styles through keywords::
* Applying custom styles through a style template::

Applying custom styles through keywords

* Skeletal structure of ‘styles.xml’: Skeletal structure of stylesxml.
* Skeletal structure of ‘contents.xml’: Skeletal structure of contentsxml.
* ODT_EXTRA_STYLES::
* ODT_AUTOMATIC_STYLES::
* ODT_MASTER_STYLES and ODT_EXTRA_AUTOMATIC_STYLES::

Applying custom styles through a style template

* Applying custom styles - the easy way::
* Using third-party styles and templates::

List Tables in ODT export

* Examples::
* A list table with rules, column size and alignments: A list table with rules column size and alignments.
* List table with table and figures::
* List table can contain other tables::

Images in ODT export

* Embedding images::
* Embedding clickable images::
* Sizing and scaling of embedded images::
* Anchoring of images::

Math formatting in ODT export

* Working with LaTeX math snippets:: How to embed LaTeX math fragments
* Working with MathML or OpenDocument formula files:: How to embed equations in native format

Advanced topics in ODT export

* Configuring a document converter:: How to register a document converter
* Working with OpenDocument style files:: Explore the internals
* Creating one-off styles::      How to produce custom highlighting etc
* Customizing tables in ODT export:: How to define and use Table templates
* Validating OpenDocument XML::  How to debug corrupt OpenDocument files

Working with OpenDocument style files

* Factory styles::
* Overriding factory styles::

Customizing tables in ODT export

* Custom table styles - an illustration::
* Custom table styles - the nitty-gritty::



File: org-odt.info,  Node: Project Summary,  Next: Structure of ELPA tar,  Prev: Top,  Up: Top

1 Project Summary
*****************

Description
     The Authoritative fork of Org mode’s ODT exporter

URL
     <https://github.com/kjambunathan/org-mode-ox-odt>

Version

Depends on

Suggests

Enhances

Published

Author
     Jambunathan K <kjambuanthan at gmail.com>

Maintainer
     Jambunathan K <kjambuanthan at gmail.com>

Bug Reports
     <https://github.com/kjambunathan/org-mode-ox-odt/issues>

Help, Questions & Suggestions
     <https://github.com/kjambunathan/org-mode-ox-odt/discussions>

License

Downloads
     ELPA URL
          <https://kjambunathan.github.io/elpa/>

     User Manual (online HTML)
          <https://kjambunathan.gitlab.io/org-mode-ox-odt/>


File: org-odt.info,  Node: Structure of ELPA tar,  Next: Getting Started with ODT export,  Prev: Project Summary,  Up: Top

2 Structure of ELPA tar
***********************

./
     ox-odt-pkg.el
     ox-odt.el

etc/styles/
     OrgOdtContentTemplate.xml
     OrgOdtStyles.xml
     README

LibreOffice
     LibreOffice/OrgModeUtilities.oxt

docs/
     index.html
     org-odt.info
     org-odt.pdf
     style.css

etc/schema/
     od-manifest-schema.rnc
     od-schema.rnc
     schemas.xml

etc/schema/libreoffice/
     OpenDocument-dsig-schema-v1.3+libreoffice.rnc
     OpenDocument-manifest-schema-v1.3+libreoffice.rnc
     OpenDocument-schema-v1.3+libreoffice.rnc
     OpenDocument-schema-v1.3.rnc

etc/schema/odf1.0/
     OpenDocument-manifest-schema-v1.0-os.rnc
     OpenDocument-schema-v1.0-os.rnc
     OpenDocument-strict-schema-v1.0-os.rnc

etc/schema/odf1.1/
     OpenDocument-manifest-schema-v1.1.rnc
     OpenDocument-schema-v1.1.rnc
     OpenDocument-strict-schema-v1.1.rnc

etc/schema/odf1.2/
     OpenDocument-v1.2-os-dsig-schema.rnc
     OpenDocument-v1.2-os-manifest-schema.rnc
     OpenDocument-v1.2-os-schema.rnc

etc/schema/odf1.3/
     OpenDocument-dsig-schema-v1.3.rnc
     OpenDocument-manifest-schema-v1.3.rnc
     OpenDocument-schema-v1.3.rnc

samples/biblatex-examples/
     README.org
     biblatex-examples.bib

samples/
     masterdocument.org
     org-mode-unicorn.png
     pagebreak.odt
     pagebreak.org
     subdocument1.odt
     subdocument1.org


File: org-odt.info,  Node: Getting Started with ODT export,  Next: ODT export commands,  Prev: Structure of ELPA tar,  Up: Top

3 Getting Started with ODT export
*********************************

* Menu:

* Pre-requisites for ODT export:: What packages ODT exporter relies on
* Installation::
* Configuration::


File: org-odt.info,  Node: Pre-requisites for ODT export,  Next: Installation,  Up: Getting Started with ODT export

3.1 Pre-requisites for ODT export
=================================

The ODT backend depends on the following programs

Program               Purpose
-------------------------------------------------------------------
‘zip’(1)              To produce OpenDocument files
‘unzip’(2)            To unzip custom styles
‘identify’(3)         To identify the size of an inline image
‘latex’(4)            To compile LaTeX fragments to ‘dvi’ images
‘dvisgm’(5)           To convert ‘dvi’ images to ‘svg’
‘dvipng’(6)           To convert ‘dvi’ images to ‘png’
‘convert’(7)          To convert inline ‘pdf’ to ‘png’
‘latexmlmath’(8)      To convert LaTeX math snippets to MathML
‘mathtoweb’(9)        〃

   Of these, ‘zip’ is essential.  Rest are optional.

   ---------- Footnotes ----------

   (1) Info-ZIP (http://www.info-zip.org/)

   (2) Info-ZIP (http://www.info-zip.org/)

   (3) ImageMagick (https://imagemagick.org)

   (4) TeX Live (http://www.tug.org/texlive/)

   (5) TeX Live (http://www.tug.org/texlive/)

   (6) dvipng (http://www.nongnu.org/dvipng/)

   (7) ImageMagick (https://imagemagick.org)

   (8) LaTeXML (http://dlmf.nist.gov/LaTeXML/)

   (9) <https://sourceforge.net/projects/mathtoweb/>.  See also
MathToWeb
(https://web.archive.org/web/20200624192923/http://www.mathtoweb.com/cgi-bin/mathtoweb_download.pl).


File: org-odt.info,  Node: Installation,  Next: Configuration,  Prev: Pre-requisites for ODT export,  Up: Getting Started with ODT export

3.2 Installation
================

You can install the OpenDocument Text export backend using the Emacs
package manager.  The archive URL for the package is
<https://kjambunathan.github.io/elpa/>.

   A typical configuration look like this

     (custom-set-variables
      '(package-archives
        (quote
         (("gnu" . "https://elpa.gnu.org/packages/")
          ("ox-odt" . "https://kjambunathan.github.io/elpa/")))))

   In the ‘*Packages*’ buffer, packages from this archive show up as
below

     ox-odt                 9.2.6.263  ... OpenDocument Text Exporter for Org Mode


File: org-odt.info,  Node: Configuration,  Prev: Installation,  Up: Getting Started with ODT export

3.3 Configuration
=================

Here is a sample configuration.

     (custom-set-variables
      '(org-odt-convert-process "LibreOffice")
      '(org-odt-preferred-output-format "docx")
      '(org-odt-transform-processes
        '(("Optimize Column Width of all Tables"
           "soffice" "--norestore" "--invisible" "--headless"
           "macro:///OrgMode.Utilities.OptimizeColumnWidth(%I)")
          ("Update All"
           "soffice" "--norestore" "--invisible" "--headless"
           "macro:///OrgMode.Utilities.UpdateAll(%I)")
          ("Reload"
           "soffice" "--norestore" "--invisible" "--headless"
           "macro:///OrgMode.Utilities.Reload(%I)")))
      '(org-latex-to-mathml-convert-command
        "java -jar %j -unicode -force -df %o %I")
      '(org-latex-to-mathml-jar-file
        "/home/kjambunathan/Downloads/mathtoweb.jar"))

     (require 'ox-odt)

     ;; (setcdr (assq 'system org-file-apps-defaults-gnu) "xdg-open %s")
     (setcdr (assq 'system org-file-apps-gnu) "xdg-open %s")

     (advice-add 'org-open-file :around
                 (lambda (orig-fun &rest args)
                   ;; Work around a weird problem with xdg-open.
                   (let ((process-connection-type nil))
                     (apply orig-fun args))))


   Above configuration sets up the ODT backend as follows:

  1. Use ‘"LibreOffice"’ (i.e., ‘soffice’ executable) as the document
     converter
  2. Generate a ‘docx’ document for every ‘odt’ document
  3. Process the ‘odt’ document with a set of LibreOffice Basic Macros
     to
        • Optimize the column width of all tables
        • Update cross-references, table of contents etc.
        • (if you are already viewing a past version of a ‘odt’ file),
          re-load the new file in the same application window.
  4. Tell where your ‘mathtoweb’ executable is located, and how it is
     invoked.
  5. (if you are using a GNU system) open the ‘odt’ document with your
     preferred OpenDocument viewer, presumably ‘LibreOffice’.


File: org-odt.info,  Node: ODT export commands,  Next: Extending ODT export,  Prev: Getting Started with ODT export,  Up: Top

4 ODT export commands
*********************

* Menu:

* Exporting to ODT::


File: org-odt.info,  Node: Exporting to ODT,  Up: ODT export commands

4.1 Exporting to ODT
====================

‘C-c C-e o o’ (‘org-odt-export-to-odt’)
     Export as OpenDocument Text file.

     If ‘org-odt-preferred-output-format’ is specified, automatically
     convert the exported file to that format.  See *note Automatically
     exporting to other formats::.

‘C-c C-e o O’
     Export as OpenDocument Text file and open the resulting file.

     If ‘org-odt-preferred-output-format’ is specified, open the
     converted file instead.  See *note Automatically exporting to other
     formats::.


File: org-odt.info,  Node: Extending ODT export,  Next: Applying custom styles,  Prev: ODT export commands,  Up: Top

5 Extending ODT export
**********************

The ODT exporter can interface with a variety of document converters and
supports popular converters out of the box.  As a result, you can use it
to export to formats like ‘doc’ or convert a document from one format
(say ‘csv’) to another format (say ‘ods’ or ‘xls’).

   If you have a working installation of LibreOffice, a document
converter is pre-configured for you and you can use it right away.  If
you would like to use ‘unoconv’ as your preferred converter, customize
the variable ‘org-odt-convert-process’ to point to ‘unoconv’.  You can
also use your own favorite converter or tweak the default settings of
the LibreOffice and ‘unoconv’ converters.  See *note Configuring a
document converter::.

* Menu:

* Automatically exporting to other formats::
* Converting between document formats::


File: org-odt.info,  Node: Automatically exporting to other formats,  Next: Converting between document formats,  Up: Extending ODT export

5.1 Automatically exporting to other formats
============================================

Very often, you will find yourself exporting to ODT format, only to
immediately save the exported document to other formats like ‘doc’,
‘docx’, ‘rtf’, ‘pdf’ etc.  In such cases, you can specify your preferred
output format by customizing the variable
‘org-odt-preferred-output-format’.  This way, the export commands (see
*note Exporting to ODT::) can be extended to export to a format that is
of immediate interest to you.


File: org-odt.info,  Node: Converting between document formats,  Prev: Automatically exporting to other formats,  Up: Extending ODT export

5.2 Converting between document formats
=======================================

There are many document converters in the wild which support conversion
to and from various file formats, including, but not limited to the ODT
format.  LibreOffice converter, mentioned above, is one such converter.
Once a converter is configured, you can interact with it using the
following command.

‘M-x org-odt-convert’
     Convert an existing document from one format to another.  With a
     prefix argument, also open the newly produced file.


File: org-odt.info,  Node: Applying custom styles,  Next: Links in ODT export,  Prev: Extending ODT export,  Up: Top

6 Applying custom styles
************************

* Menu:

* Applying custom styles through keywords::
* Applying custom styles through a style template::


File: org-odt.info,  Node: Applying custom styles through keywords,  Next: Applying custom styles through a style template,  Up: Applying custom styles

6.1 Applying custom styles through keywords
===========================================

* Menu:

* Skeletal structure of ‘styles.xml’: Skeletal structure of stylesxml.
* Skeletal structure of ‘contents.xml’: Skeletal structure of contentsxml.
* ODT_EXTRA_STYLES::
* ODT_AUTOMATIC_STYLES::
* ODT_MASTER_STYLES and ODT_EXTRA_AUTOMATIC_STYLES::


File: org-odt.info,  Node: Skeletal structure of stylesxml,  Next: Skeletal structure of contentsxml,  Up: Applying custom styles through keywords

6.1.1 Skeletal structure of ‘styles.xml’
----------------------------------------

     <?xml version="1.0" encoding="UTF-8"?>
     <office:document-styles>
       <office:font-face-decls>
         <!-- Stuff from your default styles file -->
       </office:font-face-decls>

       <office:styles>
         <!-- Stuff from your default styles file -->
         <!-- ODT_EXTRA_STYLES goes here -->
       </office:styles>

       <office:automatic-styles>
         <!-- ODT_EXTRA_AUTOMATIC_STYLES goes here -->
         <!-- Stuff from your regular styles file -->
       </office:automatic-styles>

       <office:master-styles>
         <!-- Stuff from your default styles file -->
         <!-- ODT_MASTER_STYLES goes here -->
       </office:master-styles>
     </office:document-styles>


File: org-odt.info,  Node: Skeletal structure of contentsxml,  Next: ODT_EXTRA_STYLES,  Prev: Skeletal structure of stylesxml,  Up: Applying custom styles through keywords

6.1.2 Skeletal structure of ‘contents.xml’
------------------------------------------

     <office:document-content>
       <office:scripts/>
       <office:font-face-decls>
         <!-- Stuff from your default styles file -->
       </office:font-face-decls>

       <office:automatic-styles>
         <!-- Stuff from your default styles file -->
         <!-- ODT_AUTOMATIC_STYLES goes here -->
       </office:automatic-styles>

       <office:body>
         <office:text>
           <!-- Stuff from your default styles file -->
         </office:text>
       </office:body>
     </office:document-content>


File: org-odt.info,  Node: ODT_EXTRA_STYLES,  Next: ODT_AUTOMATIC_STYLES,  Prev: Skeletal structure of contentsxml,  Up: Applying custom styles through keywords

6.1.3 ‘ODT_EXTRA_STYLES’
------------------------

ODT_EXTRA_STYLES


     #+ODT_EXTRA_STYLES: <style:style style:name="Text_20_body_large"
     #+ODT_EXTRA_STYLES:              style:family="paragraph"
     #+ODT_EXTRA_STYLES:              style:parent-style-name="Text_20_body">
     #+ODT_EXTRA_STYLES:   <style:text-properties fo:font-size="150%"/>
     #+ODT_EXTRA_STYLES: </style:style>

     *** A regular paragraph

     Nunc eleifend leo vitae magna.  Nunc eleifend leo vitae magna.
     Curabitur lacinia pulvinar nibh.  Donec posuere augue in quam.
     Aliquam posuere.  Nullam rutrum.  Aliquam posuere.

     *** Same paragraph, in a larger font

     #+ATTR_ODT: :style "Text_20_body_large"
     Nunc eleifend leo vitae magna.  Nunc eleifend leo vitae magna.
     Curabitur lacinia pulvinar nibh.  Donec posuere augue in quam.
     Aliquam posuere.  Nullam rutrum.  Aliquam posuere.


 [image src="custom-styles-1.png" ]



File: org-odt.info,  Node: ODT_AUTOMATIC_STYLES,  Next: ODT_MASTER_STYLES and ODT_EXTRA_AUTOMATIC_STYLES,  Prev: ODT_EXTRA_STYLES,  Up: Applying custom styles through keywords

6.1.4 ‘ODT_AUTOMATIC_STYLES’
----------------------------

ODT_AUTOMATIC_STYLES


     #+ODT_AUTOMATIC_STYLES: <style:style style:name="DropCaps"
     #+ODT_AUTOMATIC_STYLES:              style:family="paragraph"
     #+ODT_AUTOMATIC_STYLES:              style:parent-style-name="Text_20_body">
     #+ODT_AUTOMATIC_STYLES:  <style:paragraph-properties>
     #+ODT_AUTOMATIC_STYLES:   <style:drop-cap style:lines="3"/>
     #+ODT_AUTOMATIC_STYLES:  </style:paragraph-properties>
     #+ODT_AUTOMATIC_STYLES: </style:style>

     *** A regular paragraph

     Nunc eleifend leo vitae magna.  Nunc eleifend leo vitae magna.
     Curabitur lacinia pulvinar nibh.  Donec posuere augue in quam.
     Aliquam posuere.  Nullam rutrum.  Aliquam posuere.

     *** Same paragraph, but with =Drop Caps=

     #+ATTR_ODT: :style "DropCaps"
     Nunc eleifend leo vitae magna.  Nunc eleifend leo vitae magna.
     Curabitur lacinia pulvinar nibh.  Donec posuere augue in quam.
     Aliquam posuere.  Nullam rutrum.  Aliquam posuere.


 [image src="custom-styles-2.png" ]



File: org-odt.info,  Node: ODT_MASTER_STYLES and ODT_EXTRA_AUTOMATIC_STYLES,  Prev: ODT_AUTOMATIC_STYLES,  Up: Applying custom styles through keywords

6.1.5 ‘ODT_MASTER_STYLES’ and ‘ODT_EXTRA_AUTOMATIC_STYLES’
----------------------------------------------------------

ODT_EXTRA_IMAGES

ODT_MASTER_STYLES

ODT_EXTRA_AUTOMATIC_STYLES


     #+ODT_EXTRA_IMAGES: Pictures/org-mode-unicorn.png

     #+ODT_EXTRA_STYLES: <style:style style:name="Header"
     #+ODT_EXTRA_STYLES:              style:family="paragraph">
     #+ODT_EXTRA_STYLES:   <loext:graphic-properties draw:fill="none"/>
     #+ODT_EXTRA_STYLES:   <style:paragraph-properties
     #+ODT_EXTRA_STYLES:       fo:margin-left="2.499cm"
     #+ODT_EXTRA_STYLES:       fo:margin-right="2.499cm"
     #+ODT_EXTRA_STYLES:       fo:margin-top="0cm"
     #+ODT_EXTRA_STYLES:       fo:margin-bottom="0.499cm"
     #+ODT_EXTRA_STYLES:       fo:text-align="center"
     #+ODT_EXTRA_STYLES:       style:justify-single-word="false"
     #+ODT_EXTRA_STYLES:       fo:text-indent="0cm"
     #+ODT_EXTRA_STYLES:       style:auto-text-indent="false"
     #+ODT_EXTRA_STYLES:       fo:background-color="transparent"
     #+ODT_EXTRA_STYLES:       fo:padding-left="0cm"
     #+ODT_EXTRA_STYLES:       fo:padding-right="0cm"
     #+ODT_EXTRA_STYLES:       fo:padding-top="0cm"
     #+ODT_EXTRA_STYLES:       fo:padding-bottom="0.199cm"
     #+ODT_EXTRA_STYLES:       fo:border-left="none"
     #+ODT_EXTRA_STYLES:       fo:border-right="none"
     #+ODT_EXTRA_STYLES:       fo:border-top="none"
     #+ODT_EXTRA_STYLES:       fo:border-bottom="0.06pt solid #000000"/>
     #+ODT_EXTRA_STYLES:   <style:text-properties
     #+ODT_EXTRA_STYLES:       fo:font-size="18pt" fo:font-style="italic"
     #+ODT_EXTRA_STYLES:       style:font-size-asian="18pt"
     #+ODT_EXTRA_STYLES:       style:font-style-asian="italic"
     #+ODT_EXTRA_STYLES:       style:font-size-complex="18pt"
     #+ODT_EXTRA_STYLES:       style:font-style-complex="italic"/>
     #+ODT_EXTRA_STYLES: </style:style>

     #+ODT_EXTRA_STYLES:  <style:style style:name="Logo" style:family="graphic"
     #+ODT_EXTRA_STYLES:               style:parent-style-name="Graphics">
     #+ODT_EXTRA_STYLES:    <style:graphic-properties
     #+ODT_EXTRA_STYLES:        svg:width="2.311cm" fo:min-height="2.499cm"
     #+ODT_EXTRA_STYLES:        svg:x="0cm" svg:y="-0.9cm" fo:margin-left="0cm"
     #+ODT_EXTRA_STYLES:        fo:margin-right="0cm" fo:margin-top="0cm"
     #+ODT_EXTRA_STYLES:        fo:margin-bottom="0cm" style:wrap="none"
     #+ODT_EXTRA_STYLES:        style:vertical-pos="middle"
     #+ODT_EXTRA_STYLES:        style:vertical-rel="paragraph-content"
     #+ODT_EXTRA_STYLES:        style:horizontal-pos="left"
     #+ODT_EXTRA_STYLES:        style:horizontal-rel="page-content"
     #+ODT_EXTRA_STYLES:        fo:background-color="transparent"
     #+ODT_EXTRA_STYLES:        draw:fill="none"/>
     #+ODT_EXTRA_STYLES:  </style:style>

     #+ODT_MASTER_STYLES: <style:master-page
     #+ODT_MASTER_STYLES:     style:name="Standard"
     #+ODT_MASTER_STYLES:     style:page-layout-name="Mpm1">
     #+ODT_MASTER_STYLES:   <style:header>
     #+ODT_MASTER_STYLES:     <text:p text:style-name="Header">
     #+ODT_MASTER_STYLES:       <draw:frame
     #+ODT_MASTER_STYLES:           draw:style-name="Logo"
     #+ODT_MASTER_STYLES:           draw:name="Image1"
     #+ODT_MASTER_STYLES:           text:anchor-type="paragraph"
     #+ODT_MASTER_STYLES:           svg:width="2.311cm"
     #+ODT_MASTER_STYLES:           svg:height="2.499cm"
     #+ODT_MASTER_STYLES:           draw:z-index="0">
     #+ODT_MASTER_STYLES:         <draw:image
     #+ODT_MASTER_STYLES:             xlink:href="Pictures/org-mode-unicorn.png"
     #+ODT_MASTER_STYLES:             xlink:type="simple"
     #+ODT_MASTER_STYLES:             xlink:show="embed"
     #+ODT_MASTER_STYLES:             xlink:actuate="onLoad"
     #+ODT_MASTER_STYLES:             loext:mime-type="image/png"/>
     #+ODT_MASTER_STYLES:     </draw:frame>Friends of the Unicorn</text:p>
     #+ODT_MASTER_STYLES:   </style:header>
     #+ODT_MASTER_STYLES: </style:master-page>

     #+ODT_EXTRA_AUTOMATIC_STYLES: <style:page-layout style:name="Mpm1"
     #+ODT_EXTRA_AUTOMATIC_STYLES:                    style:page-usage="mirrored">
     #+ODT_EXTRA_AUTOMATIC_STYLES:   <style:page-layout-properties
     #+ODT_EXTRA_AUTOMATIC_STYLES:       fo:page-width="21.001cm"
     #+ODT_EXTRA_AUTOMATIC_STYLES:       fo:page-height="11.10cm"
     #+ODT_EXTRA_AUTOMATIC_STYLES:       style:num-format="1"
     #+ODT_EXTRA_AUTOMATIC_STYLES:       style:print-orientation="landscape"
     #+ODT_EXTRA_AUTOMATIC_STYLES:       fo:margin-top="2cm"
     #+ODT_EXTRA_AUTOMATIC_STYLES:       fo:margin-bottom="2cm"
     #+ODT_EXTRA_AUTOMATIC_STYLES:       fo:margin-left="2cm"
     #+ODT_EXTRA_AUTOMATIC_STYLES:       fo:margin-right="2cm"
     #+ODT_EXTRA_AUTOMATIC_STYLES:       style:writing-mode="lr-tb"
     #+ODT_EXTRA_AUTOMATIC_STYLES:       style:layout-grid-color="#c0c0c0"
     #+ODT_EXTRA_AUTOMATIC_STYLES:       style:layout-grid-lines="20"
     #+ODT_EXTRA_AUTOMATIC_STYLES:       style:layout-grid-base-height="0.706cm"
     #+ODT_EXTRA_AUTOMATIC_STYLES:       style:layout-grid-ruby-height="0.353cm"
     #+ODT_EXTRA_AUTOMATIC_STYLES:       style:layout-grid-mode="none"
     #+ODT_EXTRA_AUTOMATIC_STYLES:       style:layout-grid-ruby-below="false"
     #+ODT_EXTRA_AUTOMATIC_STYLES:       style:layout-grid-print="false"
     #+ODT_EXTRA_AUTOMATIC_STYLES:       style:layout-grid-display="false"
     #+ODT_EXTRA_AUTOMATIC_STYLES:       style:footnote-max-height="0cm">
     #+ODT_EXTRA_AUTOMATIC_STYLES:     <style:footnote-sep
     #+ODT_EXTRA_AUTOMATIC_STYLES:         style:width="0.018cm"
     #+ODT_EXTRA_AUTOMATIC_STYLES:         style:distance-before-sep="0.101cm"
     #+ODT_EXTRA_AUTOMATIC_STYLES:         style:distance-after-sep="0.101cm"
     #+ODT_EXTRA_AUTOMATIC_STYLES:         style:line-style="solid"
     #+ODT_EXTRA_AUTOMATIC_STYLES:         style:adjustment="left"
     #+ODT_EXTRA_AUTOMATIC_STYLES:         style:rel-width="25%"
     #+ODT_EXTRA_AUTOMATIC_STYLES:         style:color="#000000"/>
     #+ODT_EXTRA_AUTOMATIC_STYLES:   </style:page-layout-properties>
     #+ODT_EXTRA_AUTOMATIC_STYLES:   <style:header-style>
     #+ODT_EXTRA_AUTOMATIC_STYLES:     <style:header-footer-properties
     #+ODT_EXTRA_AUTOMATIC_STYLES:         fo:min-height="0.499cm"
     #+ODT_EXTRA_AUTOMATIC_STYLES:         fo:margin-left="0cm"
     #+ODT_EXTRA_AUTOMATIC_STYLES:         fo:margin-right="0cm"
     #+ODT_EXTRA_AUTOMATIC_STYLES:         fo:margin-bottom="0cm"/>
     #+ODT_EXTRA_AUTOMATIC_STYLES:   </style:header-style>
     #+ODT_EXTRA_AUTOMATIC_STYLES:   <style:footer-style/>
     #+ODT_EXTRA_AUTOMATIC_STYLES: </style:page-layout>

     Nunc eleifend leo vitae magna.  Nunc eleifend leo vitae magna.
     Curabitur lacinia pulvinar nibh.  Donec posuere augue in quam.
     Aliquam posuere.  Nullam rutrum.  Aliquam posuere.


 [image src="custom-styles-4.png" ]



File: org-odt.info,  Node: Applying custom styles through a style template,  Prev: Applying custom styles through keywords,  Up: Applying custom styles

6.2 Applying custom styles through a style template
===================================================

The ODT exporter ships with a set of OpenDocument styles (see *note
Working with OpenDocument style files::) that ensure a well-formatted
output.  These factory styles, however, may not cater to your specific
tastes.  To customize the output, you can either modify the above styles
files directly, or generate the required styles using an application
like LibreOffice.  The latter method is suitable for expert and
non-expert users alike, and is described here.

* Menu:

* Applying custom styles - the easy way::
* Using third-party styles and templates::


File: org-odt.info,  Node: Applying custom styles - the easy way,  Next: Using third-party styles and templates,  Up: Applying custom styles through a style template

6.2.1 Applying custom styles - the easy way
-------------------------------------------

  1. Create a sample ‘example.org’ file with the below settings and
     export it to ODT format.

          #+OPTIONS: H:10 num:t

  2. Open the above ‘example.odt’ using LibreOffice.  Use the Stylist to
     locate the target styles - these typically have the ‘Org’ prefix -
     and modify those to your taste.  Save the modified file either as
     an OpenDocument Text (‘.odt’) or OpenDocument Template (‘.ott’)
     file.

  3. Customize the variable ‘org-odt-styles-file’ and point it to the
     newly created file.  For additional configuration options see *note
     Overriding factory styles::.

     If you would like to choose a style on a per-file basis, you can
     use the ‘#+ODT_STYLES_FILE’ option.  A typical setting will look
     like

          #+ODT_STYLES_FILE: "/path/to/example.ott"

     or

          #+ODT_STYLES_FILE: ("/path/to/file.ott" ("styles.xml" "image/hdr.png"))


File: org-odt.info,  Node: Using third-party styles and templates,  Prev: Applying custom styles - the easy way,  Up: Applying custom styles through a style template

6.2.2 Using third-party styles and templates
--------------------------------------------

You can use third-party styles and templates for customizing your
output.  This will produce the desired output only if the template
provides all style names that the ‘ODT’ exporter relies on.  Unless this
condition is met, the output is going to be less than satisfactory.  So
it is highly recommended that you only work with templates that are
directly derived from the factory settings.


File: org-odt.info,  Node: Links in ODT export,  Next: List Tables in ODT export,  Prev: Applying custom styles,  Up: Top

7 Links in ODT export
*********************

ODT exporter creates native cross-references for internal links.  It
creates Internet-style links for all other links.

   A link with no description and destined to a regular (un-itemized)
outline heading is replaced with a cross-reference and section number of
the heading.

   A ‘\ref{label}’-style reference to an image, table etc.  is replaced
with a cross-reference and sequence number of the labeled entity.  See
*note Labels and captions in ODT export::.


File: org-odt.info,  Node: List Tables in ODT export,  Next: Tables in ODT export,  Prev: Links in ODT export,  Up: Top

8 List Tables in ODT export
***************************

A ‘List Table’, in simple terms, is a list that is typeset as a table.
Use it to create tables with multi-paragraph content.

Why a ‘List Table’?

   Org mode’s tables are line-oriented i.e., each row (and hence a cell)
cannot span multiple lines.  This choice has serious limitations.
Specifically,

   • a table cell cannot have more than a single paragraph

   • if the sole paragraph has copious text, the table will overflow
     your display screen, and editing or reviewing such tables is very
     cumbersome and annoying.

   A list table overcomes the above problem.

   Lists that are marked with attribute ‘:list-table’ are called as list
tables.  They will be rendered as a table within the exported document.

* Menu:

* Examples::
* A list table with rules, column size and alignments: A list table with rules column size and alignments.
* List table with table and figures::
* List table can contain other tables::


File: org-odt.info,  Node: Examples,  Next: A list table with rules column size and alignments,  Up: List Tables in ODT export

8.1 Examples
============

A simple list table

   Consider an example.  The following list table

     #+ATTR_ODT: :rel-width 80
     #+ATTR_ODT: :list-table t
     -
       - Row 1, Col 1
       - Row 1, Col 2
       - Row 1, Col 3
       - Row 1, Col 4
     - -----
       - Row 2, Col 1
       - Row 2, Col 2
       - Row 2, Col 3
       - Row 2, Col 4

   will be exported as though it were an Org table like the one show
below.

     | Row 1, Col 1 | Row 1, Col 2 | Row 1, Col 3 | Row 1, Col 4 |
     | Row 2, Col 1 | Row 2, Col 2 | Row 2, Col 3 | Row 2, Col 4 |

 [image src="list-table-1.png" ]



File: org-odt.info,  Node: A list table with rules column size and alignments,  Next: List table with table and figures,  Prev: Examples,  Up: List Tables in ODT export

8.2 A list table with rules, column size and alignments
=======================================================

List tables honor all attributes save for the column alignments.

     #+ATTR_ODT: :list-table t
     - | /    | <    | >    |      |
     - | <l2> | <l1> | <l1> | <l8> |
     -
       - Row 1, Col 1
       - Row 1, Col 2
       - Row 1, Col 3
       - Row 1, Col 4
     - ----------------
       - Row 2, Col 1
       - Row 2, Col 2
       - Row 2, Col 3
       - Row 2, Col 4

   Above list table will be exported as if it were an Org table like the
one below

     | /            | <            | >            |              |
     | <l2>         | <l1>         | <l1>         | <l8>         |
     | Row 1, Col 1 | Row 1, Col 2 | Row 1, Col 3 | Row 1, Col 4 |
     |--------------+--------------+--------------+--------------|
     | Row 2, Col 1 | Row 2, Col 2 | Row 2, Col 3 | Row 2, Col 4 |

 [image src="list-table-2.png" ]


   Here is a real-world table that uses the same template as the one
above

     #+ATTR_ODT: :list-table t
     - | /    | <    | >    |      |
     - | <l2> | <l1> | <l1> | <l8> |
     -
       - Day
       - Min Temp
       - Max Temp
       - Summary
     - ----------------
       - Monday
       - 11C
       - 22C
       -
         1. A clear day with lots of sunshine.
         2. Late in the day, a strong breeze will bring down the temperatures.
     - ----------------
       - Tuesday
       - 9C
       - 19C
       -
         1. Cloudy with rain, across many northern regions.
         2. Clear spells across most of Scotland and Northern Ireland, but
            rain reaching the far northwest.

 [image src="list-table-3.png" ]



File: org-odt.info,  Node: List table with table and figures,  Next: List table can contain other tables,  Prev: A list table with rules column size and alignments,  Up: List Tables in ODT export

8.3 List table with table and figures
=====================================

List tables are particularly well-suited for creating captioned
side-by-side images.  Note that with conventional ‘org’ tables, even
though you can place images side-by-side using a table, you cannot
caption them.

     #+ATTR_ODT: :list-table t
     -
       -
         #+CAPTION: A Unicorn
         [[./org-mode-unicorn.png]]
       -
         #+CAPTION: Yet another Unicorn
         [[./org-mode-unicorn.png]]

 [image src="list-table-4.png" ]



File: org-odt.info,  Node: List table can contain other tables,  Prev: List table with table and figures,  Up: List Tables in ODT export

8.4 List table can contain other tables
=======================================

     #+ATTR_ODT: :list-table t
     -
       - Comments
       - A Dog & A Cat
     - --------
       - This table contains
         - A Dog
         - A cat

         | Animal | What it does |
         |--------+--------------|
         | Dog    | Barks        |
         | Cat    | News         |

       -
         #+ATTR_ODT: :list-table t
         -
           -
             #+CAPTION: A Dog
             #+ATTR_ODT: :scale .8
             [[./org-mode-unicorn.png]]
           -
             #+CAPTION: A Cat
             #+ATTR_ODT: :scale .8
             [[./org-mode-unicorn.png]]
     - --------

 [image src="list-table-6.png" ]



File: org-odt.info,  Node: Tables in ODT export,  Next: Images in ODT export,  Prev: List Tables in ODT export,  Up: Top

9 Tables in ODT export
**********************

Export of native Org mode tables (See *note (org)Tables::) and simple
‘table.el’ tables is supported.  However, export of complex ‘table.el’
tables - tables that have column or row spans - is not supported.  Such
tables are stripped from the exported document.

   By default, a table is exported with top and bottom frames and with
rules separating row and column groups (See *note (org)Column Groups::).
Furthermore, all tables are typeset to occupy the same width.  If the
table specifies alignment and relative width for its columns (See *note
(org)Column Width and Alignment::) then these are honored on export.(1)

   You can control the width of the table by specifying ‘:rel-width’
property using an ‘#+ATTR_ODT’ line.

   For example, consider the following table which makes use of all the
rules mentioned above.

     #+ATTR_ODT: :rel-width 50
     | Area/Month    |   Jan |   Feb |   Mar |   Sum |
     |---------------+-------+-------+-------+-------|
     | /             |     < |       |       |     < |
     | <l13>         |  <r5> |  <r5> |  <r5> |  <r6> |
     | North America |     1 |    21 |   926 |   948 |
     | Middle East   |     6 |    75 |   844 |   925 |
     | Asia Pacific  |     9 |    27 |   790 |   826 |
     |---------------+-------+-------+-------+-------|
     | Sum           |    16 |   123 |  2560 |  2699 |

   On export, the table will occupy 50% of text area.  The columns will
be sized (roughly) in the ratio of 13:5:5:5:6.  The first column will be
left-aligned and rest of the columns will be right-aligned.  There will
be vertical rules after separating the header and last columns from
other columns.  There will be horizontal rules separating the header and
last rows from other rows.

   If you are not satisfied with the above formatting options, you can
create custom table styles and associate them with a table using the
‘#+ATTR_ODT’ line.  See *note Customizing tables in ODT export::.

   ---------- Footnotes ----------

   (1) The column widths are interpreted as weighted ratios with the
default weight being 1


File: org-odt.info,  Node: Images in ODT export,  Next: Math formatting in ODT export,  Prev: Tables in ODT export,  Up: Top

10 Images in ODT export
***********************

* Menu:

* Embedding images::
* Embedding clickable images::
* Sizing and scaling of embedded images::
* Anchoring of images::


File: org-odt.info,  Node: Embedding images,  Next: Embedding clickable images,  Up: Images in ODT export

10.1 Embedding images
=====================

You can embed images within the exported document by providing a link to
the desired image file with no link description.  For example, to embed
‘img.png’ do either of the following:

     [[file:img.png]]

     [[./img.png]]


File: org-odt.info,  Node: Embedding clickable images,  Next: Sizing and scaling of embedded images,  Prev: Embedding images,  Up: Images in ODT export

10.2 Embedding clickable images
===============================

You can create clickable images by providing a link whose description is
a link to an image file.  For example, to embed a image
org-mode-unicorn.png which when clicked jumps to <http://Orgmode.org>
website, do the following

     [[http://orgmode.org][./org-mode-unicorn.png]]


File: org-odt.info,  Node: Sizing and scaling of embedded images,  Next: Anchoring of images,  Prev: Embedding clickable images,  Up: Images in ODT export

10.3 Sizing and scaling of embedded images
==========================================

You can control the size and scale of the embedded images using the
‘#+ATTR_ODT’ attribute.

   The exporter specifies the desired size of the image in the final
document in units of centimeters.  In order to scale the embedded
images, the exporter queries for pixel dimensions of the images using
one of a) ImageMagick’s identify program or b) Emacs ‘create-image’ and
‘image-size’ APIs.(1)  The pixel dimensions are subsequently converted
in to units of centimeters using ‘org-odt-pixels-per-inch’.  The default
value of this variable is set to ‘display-pixels-per-inch’.  You can
tweak this variable to achieve the best results.

   The examples below illustrate the various possibilities.

Explicitly size the image
     To embed ‘img.png’ as a 10 cm x 10 cm image, do the following:

          #+ATTR_ODT: :width 10 :height 10
          [[./img.png]]

Scale the image
     To embed ‘img.png’ at half its size, do the following:

          #+ATTR_ODT: :scale 0.5
          [[./img.png]]

Scale the image to a specific width
     To embed ‘img.png’ with a width of 10 cm while retaining the
     original height:width ratio, do the following:

          #+ATTR_ODT: :width 10
          [[./img.png]]

Scale the image to a specific height
     To embed ‘img.png’ with a height of 10 cm while retaining the
     original height:width ratio, do the following

          #+ATTR_ODT: :height 10
          [[./img.png]]

   ---------- Footnotes ----------

   (1) Use of ImageMagick is only desirable.  However, if you routinely
produce documents that have large images or you export your Org files
that has images using a Emacs batch script, then the use of ImageMagick
is mandatory.


File: org-odt.info,  Node: Anchoring of images,  Prev: Sizing and scaling of embedded images,  Up: Images in ODT export

10.4 Anchoring of images
========================

You can control the manner in which an image is anchored by setting the
‘:anchor’ property of it’s ‘#+ATTR_ODT’ line.  You can specify one of
the the following three values for the ‘:anchor’ property - ‘"as-char"’,
‘"paragraph"’ and ‘"page"’.

   To create an image that is anchored to a page, do the following:

     #+ATTR_ODT: :anchor "page"
     [[./img.png]]


File: org-odt.info,  Node: Math formatting in ODT export,  Next: Labels and captions in ODT export,  Prev: Images in ODT export,  Up: Top

11 Math formatting in ODT export
********************************

The ODT exporter has special support for handling math.

* Menu:

* Working with LaTeX math snippets:: How to embed LaTeX math fragments
* Working with MathML or OpenDocument formula files:: How to embed equations in native format


File: org-odt.info,  Node: Working with LaTeX math snippets,  Next: Working with MathML or OpenDocument formula files,  Up: Math formatting in ODT export

11.1 Working with LaTeX math snippets
=====================================

LaTeX math snippets (See *note (org)LaTeX fragments::) can be embedded
in the ODT document in one of the following ways:

  1. MathML

     This option is activated on a per-file basis with

          #+OPTIONS: LaTeX:t

     With this option, LaTeX fragments are first converted into MathML
     fragments using an external LaTeX-to-MathML converter program.  The
     resulting MathML fragments are then embedded as an OpenDocument
     Formula in the exported document.

     You can specify the LaTeX-to-MathML converter by customizing the
     variables ‘org-latex-to-mathml-convert-command’ and
     ‘org-latex-to-mathml-jar-file’.

     If you prefer to use MathToWeb(1) as your converter, you can
     configure the above variables as shown below.

          (setq org-latex-to-mathml-convert-command
                "java -jar %j -unicode -force -df %o %I"
                org-latex-to-mathml-jar-file
                "/path/to/mathtoweb.jar")

     You can use the following commands to quickly verify the
     reliability of the LaTeX-to-MathML converter.

     ‘M-x org-export-as-odf’
          Convert a LaTeX math snippet to OpenDocument formula (‘.odf’)
          file.

     ‘M-x org-export-as-odf-and-open’
          Convert a LaTeX math snippet to OpenDocument formula (‘.odf’)
          file and open the formula file with the system-registered
          application.

  2. PNG images

     This option is activated on a per-file basis with

          #+OPTIONS: LaTeX:dvipng

     With this option, LaTeX fragments are processed into PNG images and
     the resulting images are embedded in the exported document.  This
     method requires that the dvipng program be available on your
     system.

   ---------- Footnotes ----------

   (1) <https://sourceforge.net/projects/mathtoweb/>.  See also
MathToWeb
(https://web.archive.org/web/20200624192923/http://www.mathtoweb.com/cgi-bin/mathtoweb_download.pl).


File: org-odt.info,  Node: Working with MathML or OpenDocument formula files,  Prev: Working with LaTeX math snippets,  Up: Math formatting in ODT export

11.2 Working with MathML or OpenDocument formula files
======================================================

For various reasons, you may find embedding LaTeX math snippets in an
ODT document less than reliable.  In that case, you can embed a math
equation by linking to its MathML (‘.mml’) source or its OpenDocument
formula (‘.odf’) file as shown below:

     [[./equation.mml]]

   or

     [[./equation.odf]]


File: org-odt.info,  Node: Labels and captions in ODT export,  Next: Literal examples in ODT export,  Prev: Math formatting in ODT export,  Up: Top

12 Labels and captions in ODT export
************************************

You can label and caption various category of objects - an inline image,
a table, a LaTeX fragment or a Math formula - using ‘#+LABEL’ and
‘#+CAPTION’ lines.  See *note (emacs)File Archives::.  ODT exporter
enumerates each labeled or captioned object of a given category
separately.  As a result, each such object is assigned a sequence number
based on order of it’s appearance in the Org file.

   In the exported document, a user-provided caption is augmented with
the category and sequence number.  Consider the following inline image
in an Org file.

     #+CAPTION: Bell curve
     #+LABEL:   fig:SED-HR4049
     [[./img/a.png]]

   It could be rendered as shown below in the exported document.

     Figure 2: Bell curve

   You can modify the category component of the caption by customizing
the variable ‘org-odt-category-strings’.  For example, to tag all
embedded images with the string ‘Illustration’ (instead of the default
‘Figure’) use the following setting.

     (setq org-odt-category-strings
           '(("en" "Table" "Illustration" "Equation" "Equation")))

   With this, previous image will be captioned as below in the exported
document.

     Illustration 2: Bell curve


File: org-odt.info,  Node: Literal examples in ODT export,  Next: Advanced topics in ODT export,  Prev: Labels and captions in ODT export,  Up: Top

13 Literal examples in ODT export
*********************************

Export of literal examples (See *note (org)Literal examples::) with full
fontification is supported.  Internally, the exporter relies on
‘htmlfontify.el’ to generate all style definitions needed for a fancy
listing.(1)  The auto-generated styles have ‘OrgSrc’ as prefix and
inherit their color from the faces used by Emacs ‘font-lock’ library for
the source language.

   If you prefer to use your own custom styles for fontification, you
can do so by customizing the variable
‘org-odt-create-custom-styles-for-srcblocks’.

   You can turn off fontification of literal examples by customizing the
variable ‘org-odt-fontify-srcblocks’.

   ---------- Footnotes ----------

   (1) Your ‘htmlfontify.el’ library must at least be at Emacs 24.1
levels for fontification to be turned on.


File: org-odt.info,  Node: Advanced topics in ODT export,  Next: Main Index,  Prev: Literal examples in ODT export,  Up: Top

14 Advanced topics in ODT export
********************************

If you rely heavily on ODT export, you may want to exploit the full set
of features that the exporter offers.  This section describes features
that would be of interest to power users.

* Menu:

* Configuring a document converter:: How to register a document converter
* Working with OpenDocument style files:: Explore the internals
* Creating one-off styles::      How to produce custom highlighting etc
* Customizing tables in ODT export:: How to define and use Table templates
* Validating OpenDocument XML::  How to debug corrupt OpenDocument files


File: org-odt.info,  Node: Configuring a document converter,  Next: Working with OpenDocument style files,  Up: Advanced topics in ODT export

14.1 Configuring a document converter
=====================================

The ODT exporter can work with popular converters with little or no
extra configuration from your side.  See *note Extending ODT export::.
If you are using a converter that is not supported by default or if you
would like to tweak the default converter settings, proceed as below.

  1. Register the converter

     Name your converter and add it to the list of known converters by
     customizing the variable ‘org-odt-convert-processes’.  Also specify
     how the converter can be invoked via command-line to effect the
     conversion.

  2. Configure its capabilities

     Specify the set of formats the converter can handle by customizing
     the variable ‘org-odt-convert-capabilities’.  Use the default value
     for this variable as a guide for configuring your converter.  As
     suggested by the default setting, you can specify the full set of
     formats supported by the converter and not limit yourself to
     specifying formats that are related to just the OpenDocument Text
     format.

  3. Choose the converter

     Select the newly added converter as the preferred one by
     customizing the variable ‘org-odt-convert-process’.


File: org-odt.info,  Node: Working with OpenDocument style files,  Next: Creating one-off styles,  Prev: Configuring a document converter,  Up: Advanced topics in ODT export

14.2 Working with OpenDocument style files
==========================================

This section explores the internals of the ODT exporter and the means by
which it produces styled documents.  Read this section if you are
interested in exploring the automatic and custom OpenDocument styles
used by the exporter.

* Menu:

* Factory styles::
* Overriding factory styles::


File: org-odt.info,  Node: Factory styles,  Next: Overriding factory styles,  Up: Working with OpenDocument style files

14.2.1 Factory styles
---------------------

The ODT exporter relies on two files for generating its output.  These
files are bundled with the distribution under the directory pointed to
by the variable ‘org-odt-styles-dir’.  The two files are:

‘OrgOdtStyles.xml’
     This file contributes to the ‘styles.xml’ file of the final ‘ODT’
     document.  This file gets modified for the following purposes:

       1. To control outline numbering based on user settings.

       2. To add styles generated by ‘htmlfontify.el’ for fontification
          of code blocks.

‘OrgOdtContentTemplate.xml’
     This file contributes to the ‘content.xml’ file of the final ‘ODT’
     document.  The contents of the Org outline are inserted between the
     ‘<office:text>’ ... ‘</office:text>’ elements of this file.

     Apart from serving as a template file for the final ‘content.xml’,
     the file serves the following purposes:

       1. It contains automatic styles for formatting of tables which
          are referenced by the exporter.

       2. It contains ‘<text:sequence-decl>’ ... ‘</text:sequence-decl>’
          elements that control how various entities - tables, images,
          equations etc - are numbered.


File: org-odt.info,  Node: Overriding factory styles,  Prev: Factory styles,  Up: Working with OpenDocument style files

14.2.2 Overriding factory styles
--------------------------------

The following two variables control the location from which the ODT
exporter picks up the custom styles and content template files.  You can
customize these variables to override the factory styles used by the
exporter.

‘org-odt-styles-file’
     Use this variable to specify the ‘styles.xml’ that will be used in
     the final output.  You can specify one of the following values:

       1. A ‘styles.xml’ file

          Use this file instead of the default ‘styles.xml’

       2. A ‘.odt’ or ‘.ott’ file

          Use the ‘styles.xml’ contained in the specified OpenDocument
          Text or Template file

       3. A ‘.odt’ or ‘.ott’ file and a subset of files contained within
          them

          Use the ‘styles.xml’ contained in the specified OpenDocument
          Text or Template file.  Additionally extract the specified
          member files and embed those within the final ‘ODT’ document.

          Use this option if the ‘styles.xml’ file references additional
          files like header and footer images.

       4. ‘nil’

          Use the default ‘styles.xml’

‘org-odt-content-template-file’
     Use this variable to specify the blank ‘content.xml’ that will be
     used in the final output.


File: org-odt.info,  Node: Creating one-off styles,  Next: Customizing tables in ODT export,  Prev: Working with OpenDocument style files,  Up: Advanced topics in ODT export

14.3 Creating one-off styles
============================

There are times when you would want one-off formatting in the exported
document.  You can achieve this by embedding raw OpenDocument XML in the
Org file.  The use of this feature is better illustrated with couple of
examples.

  1. Embedding ODT tags as part of regular text

     You can include simple OpenDocument tags by prefixing them with
     ‘@’.  For example, to highlight a region of text do the following:

          @<text:span text:style-name="Highlight">This is a
          highlighted text@</text:span>.  But this is a
          regular text.

     *Hint:* To see the above example in action, edit your ‘styles.xml’
     (see *note Factory styles::) and add a custom ‘Highlight’ style as
     shown below.

          <style:style style:name="Highlight" style:family="text">
            <style:text-properties fo:background-color="#ff0000"/>
          </style:style>

  2. Embedding a one-line OpenDocument XML

     You can add a simple OpenDocument one-liner using the ‘#+ODT:’
     directive.  For example, to force a page break do the following:

          #+ODT: <text:p text:style-name="PageBreak"/>

     *Hint:* To see the above example in action, edit your ‘styles.xml’
     (see *note Factory styles::) and add a custom ‘PageBreak’ style as
     shown below.

          <style:style style:name="PageBreak" style:family="paragraph"
                   style:parent-style-name="Text_20_body">
            <style:paragraph-properties fo:break-before="page"/>
          </style:style>

  3. Embedding a block of OpenDocument XML

     You can add a large block of OpenDocument XML using the
     ‘#+BEGIN_ODT’ ... ‘#+END_ODT’ construct.

     For example, to create a one-off paragraph that uses bold text, do
     the following:

          #++BEGIN_EXPORT ODT
          <text:p text:style-name="Text_20_body_20_bold">
          This paragraph is specially formatted and uses bold text.
          </text:p>
          #++END_EXPORT ODT


File: org-odt.info,  Node: Customizing tables in ODT export,  Next: Validating OpenDocument XML,  Prev: Creating one-off styles,  Up: Advanced topics in ODT export

14.4 Customizing tables in ODT export
=====================================

You can override the default formatting of the table by specifying a
custom table style with the ‘#+ATTR_ODT’ line.  For a discussion on
default formatting of tables see *note Tables in ODT export::.

   This feature closely mimics the way table templates are defined in
the OpenDocument-v1.2 specification.(1)

* Menu:

* Custom table styles - an illustration::
* Custom table styles - the nitty-gritty::

   ---------- Footnotes ----------

   (1) OpenDocument-v1.2 Specification
(http://docs.oasis-open.org/office/v1.2/OpenDocument-v1.2.html)


File: org-odt.info,  Node: Custom table styles - an illustration,  Next: Custom table styles - the nitty-gritty,  Up: Customizing tables in ODT export

14.4.1 Custom table styles - an illustration
--------------------------------------------

To have a quick preview of this feature, install the below setting and
export the table that follows.

     (setq org-odt-table-styles
           (append org-odt-table-styles
                   '(("TableWithHeaderRowAndColumn" "Custom"
                      ((use-first-row-styles . t)
                       (use-first-column-styles . t)))
                     ("TableWithFirstRowandLastRow" "Custom"
                      ((use-first-row-styles . t)
                       (use-last-row-styles . t))))))

     #+ATTR_ODT: :style "TableWithHeaderRowAndColumn"
     | Name  | Phone | Age |
     | Peter |  1234 |  17 |
     | Anna  |  4321 |  25 |

   In the above example, you used a template named ‘Custom’ and
installed two table styles with the names ‘TableWithHeaderRowAndColumn’
and ‘TableWithFirstRowandLastRow’.  (*Important:* The OpenDocument
styles needed for producing the above template have been pre-defined for
you.  These styles are available under the section marked ‘Custom Table
Template’ in OrgOdtContentTemplate.xml (see *note Factory styles::).  If
you need additional templates you have to define these styles
yourselves.


File: org-odt.info,  Node: Custom table styles - the nitty-gritty,  Prev: Custom table styles - an illustration,  Up: Customizing tables in ODT export

14.4.2 Custom table styles - the nitty-gritty
---------------------------------------------

To use this feature proceed as follows:

  1. Create a table template(1)

     A table template is nothing but a set of ‘table-cell’ and
     ‘paragraph’ styles for each of the following table cell categories:

        • Body
        • First column
        • Last column
        • First row
        • Last row
        • Even row
        • Odd row
        • Even column
        • Odd Column

     The names for the above styles must be chosen based on the name of
     the table template using a well-defined convention.

     The naming convention is better illustrated with an example.  For a
     table template with the name ‘Custom’, the needed style names are
     listed in the following table.

     Table cell type   ‘table-cell’ style             ‘paragraph’ style
     -------------------------------------------------------------------------------------
     Body              ‘CustomTableCell’              ‘CustomTableParagraph’
     First column      ‘CustomFirstColumnTableCell’   ‘CustomFirstColumnTableParagraph’
     Last column       ‘CustomLastColumnTableCell’    ‘CustomLastColumnTableParagraph’
     First row         ‘CustomFirstRowTableCell’      ‘CustomFirstRowTableParagraph’
     Last row          ‘CustomLastRowTableCell’       ‘CustomLastRowTableParagraph’
     Even row          ‘CustomEvenRowTableCell’       ‘CustomEvenRowTableParagraph’
     Odd row           ‘CustomOddRowTableCell’        ‘CustomOddRowTableParagraph’
     Even column       ‘CustomEvenColumnTableCell’    ‘CustomEvenColumnTableParagraph’
     Odd column        ‘CustomOddColumnTableCell’     ‘CustomOddColumnTableParagraph’

     To create a table template with the name ‘Custom’, define the above
     styles in the ‘<office:automatic-styles>’ ...
     ‘</office:automatic-styles>’ element of the content template file
     (see *note Factory styles::).

  2. Define a table style(2)

     To define a table style, create an entry for the style in the
     variable ‘org-odt-table-styles’ and specify the following:

        • the name of the table template created in step (1)
        • the set of cell styles in that template that are to be
          activated

     For example, the entry below defines two different table styles
     ‘TableWithHeaderRowAndColumn’ and ‘TableWithFirstRowandLastRow’
     based on the same template ‘Custom’.  The styles achieve their
     intended effect by selectively activating the individual cell
     styles in that template.

          (setq org-odt-table-styles
                (append org-odt-table-styles
                        '(("TableWithHeaderRowAndColumn" "Custom"
                           ((use-first-row-styles . t)
                            (use-first-column-styles . t)))
                          ("TableWithFirstRowandLastRow" "Custom"
                           ((use-first-row-styles . t)
                            (use-last-row-styles . t))))))

  3. Associate a table with the table style

     To do this, specify the table style created in step (2) as part of
     the ‘ATTR_ODT’ line as shown below.

          #+ATTR_ODT: :style "TableWithHeaderRowAndColumn"
          | Name  | Phone | Age |
          | Peter |  1234 |  17 |
          | Anna  |  4321 |  25 |

   ---------- Footnotes ----------

   (1) See the ‘<table:table-template>’ element of the OpenDocument-v1.2
specification

   (2) See the attributes ‘table:template-name’,
‘table:use-first-row-styles’, ‘table:use-last-row-styles’,
‘table:use-first-column-styles’, ‘table:use-last-column-styles’,
‘table:use-banding-rows-styles’, and ‘table:use-banding-column-styles’
of the ‘<table:table>’ element in the OpenDocument-v1.2 specification


File: org-odt.info,  Node: Validating OpenDocument XML,  Prev: Customizing tables in ODT export,  Up: Advanced topics in ODT export

14.5 Validating OpenDocument XML
================================

Occasionally, you will discover that the document created by the ODT
exporter cannot be opened by your favorite application.  One of the
common reasons for this is that the ‘.odt’ file is corrupt.  In such
cases, you may want to validate the document against the OpenDocument
RELAX NG Compact Syntax (RNC) schema.

   For de-compressing the ‘.odt’ file(1): See *note (emacs)File
Archives::.  For general help with validation (and schema-sensitive
editing) of XML files: See *note (nxml-mode)Introduction::.

   If you have ready access to OpenDocument ‘.rnc’ files and the needed
schema-locating rules in a single folder, you can customize the variable
‘org-odt-schema-dir’ to point to that directory.  The ODT exporter will
take care of updating the ‘rng-schema-locating-files’ for you.

   ---------- Footnotes ----------

   (1) ‘.odt’ files are nothing but ‘zip’ archives


File: org-odt.info,  Node: Main Index,  Next: Key Index,  Prev: Advanced topics in ODT export,  Up: Top

15 Main Index
*************

 [index ]
* Menu:

* ATTR_ODT, keyword:                     Tables in ODT export. (line 17)
* ATTR_ODT, keyword <1>:                 Tables in ODT export. (line 41)
* ATTR_ODT, keyword <2>:                 Sizing and scaling of embedded images.
                                                               (line  6)
* ATTR_ODT, keyword <3>:                 Anchoring of images.  (line  6)
* ATTR_ODT, keyword <4>:                 Customizing tables in ODT export.
                                                               (line  6)
* ATTR_ODT, keyword <5>:                 Custom table styles - the nitty-gritty.
                                                               (line 73)
* ODT_AUTOMATIC_STYLES, keyword:         ODT_AUTOMATIC_STYLES. (line  6)
* ODT_EXTRA_AUTOMATIC_STYLES, keyword:   ODT_MASTER_STYLES and ODT_EXTRA_AUTOMATIC_STYLES.
                                                               (line  6)
* ODT_EXTRA_IMAGES, keyword:             ODT_MASTER_STYLES and ODT_EXTRA_AUTOMATIC_STYLES.
                                                               (line  6)
* ODT_EXTRA_STYLES, keyword:             ODT_EXTRA_STYLES.     (line  6)
* ODT_MASTER_STYLES, keyword:            ODT_MASTER_STYLES and ODT_EXTRA_AUTOMATIC_STYLES.
                                                               (line  6)
* ODT_STYLES_FILE, keyword:              Applying custom styles - the easy way.
                                                               (line 21)
* unconv:                                Extending ODT export. (line 11)


File: org-odt.info,  Node: Key Index,  Next: Command and Function Index,  Prev: Main Index,  Up: Top

16 Key Index
************

 [index ]
* Menu:

* C-c C-e o:                             Exporting to ODT.     (line  7)
* C-c C-e O:                             Exporting to ODT.     (line 14)


File: org-odt.info,  Node: Command and Function Index,  Next: Variable Index,  Prev: Key Index,  Up: Top

17 Command and Function Index
*****************************

 [index ]
* Menu:

* org-export-as-odf:                     Working with LaTeX math snippets.
                                                               (line 36)
* org-export-as-odf-and-open:            Working with LaTeX math snippets.
                                                               (line 40)
* org-odt-convert:                       Converting between document formats.
                                                               (line 13)
* org-odt-export-to-odt:                 Exporting to ODT.     (line  7)


File: org-odt.info,  Node: Variable Index,  Next: What is New,  Prev: Command and Function Index,  Up: Top

18 Variable Index
*****************

 [index ]
* Menu:

* org-latex-to-mathml-convert-command:   Working with LaTeX math snippets.
                                                               (line 20)
* org-latex-to-mathml-jar-file:          Working with LaTeX math snippets.
                                                               (line 20)
* org-odt-category-strings:              Labels and captions in ODT export.
                                                               (line 25)
* org-odt-convert-capabilities:          Configuring a document converter.
                                                               (line 20)
* org-odt-convert-process:               Extending ODT export. (line 11)
* org-odt-convert-process <1>:           Configuring a document converter.
                                                               (line 30)
* org-odt-convert-processes:             Configuring a document converter.
                                                               (line 13)
* org-odt-create-custom-styles-for-srcblocks: Literal examples in ODT export.
                                                               (line 13)
* org-odt-fontify-srcblocks:             Literal examples in ODT export.
                                                               (line 17)
* org-odt-pixels-per-inch:               Sizing and scaling of embedded images.
                                                               (line  9)
* org-odt-preferred-output-format:       Exporting to ODT.     (line  9)
* org-odt-preferred-output-format <1>:   Exporting to ODT.     (line 16)
* org-odt-preferred-output-format <2>:   Automatically exporting to other formats.
                                                               (line  6)
* org-odt-styles-dir:                    Factory styles.       (line  6)
* org-odt-styles-file:                   Applying custom styles - the easy way.
                                                               (line 17)


File: org-odt.info,  Node: What is New,  Prev: Variable Index,  Up: Top

19 What is New
**************

*note List Tables in ODT export::
     Create a table with multi-paragraph content using a ‘List table’
*note Applying custom styles through keywords::



Tag Table:
Node: Top75
Node: Project Summary4193
Node: Structure of ELPA tar4972
Node: Getting Started with ODT export6454
Node: Pre-requisites for ODT export6769
Ref: Pre-requisites for ODT export-Footnote-17743
Ref: Pre-requisites for ODT export-Footnote-27787
Ref: Pre-requisites for ODT export-Footnote-37831
Ref: Pre-requisites for ODT export-Footnote-47877
Ref: Pre-requisites for ODT export-Footnote-57924
Ref: Pre-requisites for ODT export-Footnote-67971
Ref: Pre-requisites for ODT export-Footnote-78018
Ref: Pre-requisites for ODT export-Footnote-88064
Ref: Pre-requisites for ODT export-Footnote-98112
Node: Installation8288
Node: Configuration9021
Node: ODT export commands11190
Node: Exporting to ODT11395
Node: Extending ODT export12026
Node: Automatically exporting to other formats13027
Node: Converting between document formats13705
Node: Applying custom styles14385
Node: Applying custom styles through keywords14662
Node: Skeletal structure of stylesxml15169
Node: Skeletal structure of contentsxml16117
Node: ODT_EXTRA_STYLES16909
Node: ODT_AUTOMATIC_STYLES18016
Node: ODT_MASTER_STYLES and ODT_EXTRA_AUTOMATIC_STYLES19262
Node: Applying custom styles through a style template26332
Node: Applying custom styles - the easy way27150
Node: Using third-party styles and templates28339
Node: Links in ODT export28994
Node: List Tables in ODT export29632
Node: Examples30762
Node: A list table with rules column size and alignments31499
Node: List table with table and figures33368
Node: List table can contain other tables34099
Node: Tables in ODT export34965
Ref: Tables in ODT export-Footnote-137136
Node: Images in ODT export37229
Node: Embedding images37534
Node: Embedding clickable images37919
Node: Sizing and scaling of embedded images38418
Ref: Sizing and scaling of embedded images-Footnote-140155
Node: Anchoring of images40384
Node: Math formatting in ODT export40949
Node: Working with LaTeX math snippets41389
Ref: Working with LaTeX math snippets-Footnote-143403
Node: Working with MathML or OpenDocument formula files43579
Node: Labels and captions in ODT export44160
Node: Literal examples in ODT export45602
Ref: Literal examples in ODT export-Footnote-146514
Node: Advanced topics in ODT export46629
Node: Configuring a document converter47378
Node: Working with OpenDocument style files48771
Node: Factory styles49325
Node: Overriding factory styles50723
Node: Creating one-off styles52208
Node: Customizing tables in ODT export54431
Ref: Customizing tables in ODT export-Footnote-155122
Node: Custom table styles - an illustration55226
Node: Custom table styles - the nitty-gritty56632
Ref: Custom table styles - the nitty-gritty-Footnote-160297
Ref: Custom table styles - the nitty-gritty-Footnote-260389
Node: Validating OpenDocument XML60736
Ref: Validating OpenDocument XML-Footnote-161783
Node: Main Index61843
Node: Key Index63539
Node: Command and Function Index63838
Node: Variable Index64549
Node: What is New66658

End Tag Table


Local Variables:
coding: utf-8
End:
